package com.ucob.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes4;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class UCOBNodeController extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b506040516020806149bb8339810180604052810190808051906020019092919050505080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050614937806100846000396000f30060806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306b0de5c1461019057806307f96534146102315780630f75e81f1461026257806312d9a6ad14610293578063146aa5be146102fc57806319311a1c14610365578063204720d8146103985780632613f802146103cb57806329c76a73146103fc578063304a334a1461042f5780633483fc56146104625780633e8b99a8146104c5578063430694cf146104f8578063435093b7146105d957806356904d581461060857806358739e641461063957806370a082311461066c57806371952a7e146106c35780638bf9c416146107105780639afdbde714610741578063a413d88214610772578063c4afb7c2146107a5578063c4e41b22146107e8578063ca15c87314610813578063cd99f0d314610858578063d88b71ca146108c1578063daf3ad9e146108f4578063e9f917ab1461091f578063eae6be7514610988578063f18d03cc146109f1578063f3982b2914610a96575b600080fd5b34801561019c57600080fd5b506102176004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560001916906020019092919080359060200190929190505050610adf565b604051808215151515815260200191505060405180910390f35b34801561023d57600080fd5b506102606004803603810190808035600019169060200190929190505050610b45565b005b34801561026e57600080fd5b506102916004803603810190808035600019169060200190929190505050610d4c565b005b34801561029f57600080fd5b506102e26004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611277565b604051808215151515815260200191505060405180910390f35b34801561030857600080fd5b506103116113ff565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561037157600080fd5b5061037a61145e565b60405180826000191660001916815260200191505060405180910390f35b3480156103a457600080fd5b506103ad611497565b60405180826000191660001916815260200191505060405180910390f35b3480156103d757600080fd5b506103fa60048036038101908080356000191690602001909291905050506114d0565b005b34801561040857600080fd5b50610411611a7a565b60405180826000191660001916815260200191505060405180910390f35b34801561043b57600080fd5b50610444611ab3565b60405180826000191660001916815260200191505060405180910390f35b34801561046e57600080fd5b506104c3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611aec565b005b3480156104d157600080fd5b506104da611e6f565b60405180826000191660001916815260200191505060405180910390f35b34801561050457600080fd5b506105276004803603810190808035600019169060200190929190505050611ea8565b604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185600019166000191681526020018460028111156105af57fe5b60ff1681526020018381526020018215151515815260200197505050505050505060405180910390f35b3480156105e557600080fd5b506105ee611f67565b604051808215151515815260200191505060405180910390f35b34801561061457600080fd5b50610637600480360381019080803560001916906020019092919050505061205d565b005b34801561064557600080fd5b5061064e6124fa565b60405180826000191660001916815260200191505060405180910390f35b34801561067857600080fd5b506106ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612533565b6040518082815260200191505060405180910390f35b3480156106cf57600080fd5b5061070e600480360381019080803560001916906020019092919080356000191690602001909291908035600019169060200190929190505050612634565b005b34801561071c57600080fd5b5061073f6004803603810190808035600019169060200190929190505050612a75565b005b34801561074d57600080fd5b506107706004803603810190808035600019169060200190929190505050612c7c565b005b34801561077e57600080fd5b50610787612fd8565b60405180826000191660001916815260200191505060405180910390f35b3480156107b157600080fd5b506107e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613011565b005b3480156107f457600080fd5b506107fd6136b8565b6040518082815260200191505060405180910390f35b34801561081f57600080fd5b506108426004803603810190808035600019169060200190929190505050613780565b6040518082815260200191505060405180910390f35b34801561086457600080fd5b5061086d6138e0565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3480156108cd57600080fd5b506108d661393f565b60405180826000191660001916815260200191505060405180910390f35b34801561090057600080fd5b50610909613978565b6040518082815260200191505060405180910390f35b34801561092b57600080fd5b50610934613a40565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561099457600080fd5b5061099d613a79565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3480156109fd57600080fd5b50610a7c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613ab2565b604051808215151515815260200191505060405180910390f35b348015610aa257600080fd5b50610ac56004803603810190808035600019169060200190929190505050614058565b604051808215151515815260200191505060405180910390f35b6000610b2060405180807f434f52504f524154494f4e5f4d454d424552535f524f4c4500000000000000008152506018019050604051809103902033611277565b1515610b2b57600080fd5b610b3a868686866000876140b4565b905095945050505050565b600080610b9183610b8a60405180807f434f52504f524154494f4e5f4d454d424552535f524f4c45000000000000000081525060180190506040518091039020613780565b60006142ec565b1515610b9c57600080fd5b610ba583611ea8565b96505050505092505080151515610c24576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f70726f706f73616c20697320657870697265640000000000000000000000000081525060200191505060405180910390fd5b610c2d8361453b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d547741f60405180807f434f52504f524154494f4e5f4d454d424552535f524f4c45000000000000000081525060180190506040518091039020846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015610d2f57600080fd5b505af1158015610d43573d6000803e3d6000fd5b50505050505050565b600080600080600080610d9e87610d9760405180807f434f52504f524154494f4e5f4d454d424552535f524f4c45000000000000000081525060180190506040518091039020613780565b60006142ec565b1515610da957600080fd5b610db287611ea8565b985098505050509550955082151515610e33576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f70726f706f73616c20697320657870697265640000000000000000000000000081525060200191505060405180910390fd5b610e3c8761453b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5d82b6b86866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610f0157600080fd5b505af1158015610f15573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166335403023856040518263ffffffff167c010000000000000000000000000000000000000000000000","000000000002815260040180828152602001915050600060405180830381600087803b158015610faa57600080fd5b505af1158015610fbe573d6000803e3d6000fd5b505050503091508473ffffffffffffffffffffffffffffffffffffffff1660405180807f7472616e736665725265636569766528616464726573732c616464726573732c81526020017f616464726573732c75696e743235362900000000000000000000000000000000815250603001905060405180910390207c01000000000000000000000000000000000000000000000000000000009004838789886040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019450505050506000604051808303816000875af19250505090508015156111dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f63616c6c20746f20636f72706f726174696f6e436f6e7472616374416464726581526020017f7373206661696c6564000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff167fe5bb513562e705c419d60a2ad2a2baa7ff835968b09315491cbbc3650f8247138888876040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a250505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485484846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561134657600080fd5b505af115801561135a573d6000803e3d6000fd5b505050506040513d602081101561137057600080fd5b810190808051906020019092919050505015156113f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f796f7520646f206e6f742068617665207269676874000000000000000000000081525060200191505060405180910390fd5b6001905092915050565b60405180807f7472616e736665725265636569766528616464726573732c616464726573732c81526020017f616464726573732c75696e7432353629000000000000000000000000000000008152506030019050604051809103902081565b60405180807f434f52504f524154494f4e5f4252414e43485f4d414e414745525f524f4c4500815250601f019050604051809103902081565b60405180807f434f52504f524154494f4e5f43454f5f524f4c450000000000000000000000008152506014019050604051809103902081565b60008060008061151f8561151860405180807f434f52504f524154494f4e5f4d454d424552535f524f4c45000000000000000081525060180190506040518091039020613780565b60006142ec565b151561152a57600080fd5b61153385611ea8565b509650505050935093506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156115fc57600080fd5b505af1158015611610573d6000803e3d6000fd5b505050506040513d602081101561162657600080fd5b81019080805190602001909291905050501415156116ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f636f72706f726174696f6e20697320657869737465640000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5d82b6b84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561177157600080fd5b505af1158015611785573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166335403023836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561181a57600080fd5b505af115801561182e573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1660405180807f696e6974436f72706f726174696f6e436f6e74726f6c6c65722861646472657381526020017f732c75696e743235362900000000000000000000000000000000000000000000815250602a01905060405180910390207c0100000000000000000000000000000000000000000000000000000000900485846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506000604051808303816000875af19250505090508015156119e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001807f63616c6c20746f20636f72706f726174696f6e436f6e7472616374416464726581526020017f7373206661696c6564000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167fa478d0c1f701150f2da8dc388e28f010bc7d766a734465d94bcf0848be8de4898686856040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a25050505050565b60405180807f50524f4a4543545f4d414e414745525f524f4c450000000000000000000000008152506014019050604051809103902081565b60405180807f50524f4a4543545f53544146465f524f4c4500000000000000000000000000008152506012019050604051809103902081565b6000611b2d60405180807f434f52504f524154494f4e5f4d454d424552535f524f4c4500000000000000008152506018019050604051809103902033611277565b1515611b3857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d169af0846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611bf557600080fd5b505af1158015611c09573d6000803e3d6000fd5b505050506040513d6020811015611c1f57600080fd5b81019080805190602001909291905050501515611c3b57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1660405180807f6164644d616e6167657228616464726573732c61646472657373290000000000815250601b01905060405180910390207c0100000000000000000000000000000000000000000000000000000000900433846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001925050506000604051808303816000875af1925050509050801515611df0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f63616c6c20746f2070726f6a656374436f6e747261637441646472657373206681526020017f61696c656400000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f1a7efa2e3595de044e3499271cf470051711be51e45f7b0bd4cb9c62b258e3fe83604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a2505050565b60405180807f434f52504f524154494f4e5f4d454d424552535f524f4c4500000000000000008152506018019050604051809103902081565b6000806000806000806000806000808a6000191660001916815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826003015483600401548460050160009054906101000a900460ff1685600601548660070160009054906101000a900460ff16975097509750975097509750975050919395979092949650565b60003073ffffffffffffffffffffffffffffffff","ffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561200657600080fd5b505af115801561201a573d6000803e3d6000fd5b505050506040513d602081101561203057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614905090565b6000806120a9836120a260405180807f434f52504f524154494f4e5f4d454d424552535f524f4c45000000000000000081525060180190506040518091039020613780565b60006142ec565b15156120b457600080fd5b6120bd83611ea8565b9650505050509250508015151561213c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f70726f706f73616c20697320657870697265640000000000000000000000000081525060200191505060405180910390fd5b6121458361453b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561220257600080fd5b505af1158015612216573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d95847160405180807f434f52504f524154494f4e5f4d454d424552535f524f4c45000000000000000081525060180190506040518091039020846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561231c57600080fd5b505af1158015612330573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336568abe60405180807f434f52504f524154494f4e5f4d454d424552535f524f4c45000000000000000081525060180190506040518091039020306040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561243657600080fd5b505af115801561244a573d6000803e3d6000fd5b505050507feaafeba0f19a191691a683e3f4a27cf5b25a98cf5f6903eabaadd3530483521e8330846040518084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505050565b60405180807f434f52504f524154494f4e5f53544146465f524f4c45000000000000000000008152506016019050604051809103902081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156125f257600080fd5b505af1158015612606573d6000803e3d6000fd5b505050506040513d602081101561261c57600080fd5b81019080805190602001909291905050509050919050565b6000806126808361267960405180807f434f52504f524154494f4e5f4d454d424552535f524f4c45000000000000000081525060180190506040518091039020613780565b60006142ec565b151561268b57600080fd5b61269483611ea8565b96505050505092505080151515612713576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f70726f706f73616c20697320657870697265640000000000000000000000000081525060200191505060405180910390fd5b61271c8361453b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e4e009186866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826000191660001916815260200192505050600060405180830381600087803b1580156127c557600080fd5b505af11580156127d9573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d95847185846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156128aa57600080fd5b505af11580156128be573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d95847185306040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561298f57600080fd5b505af11580156129a3573d6000803e3d6000fd5b505050507f23ebce820818b843faf4907992d24dae237ee448974ccdc37f3b19886bfcd6353383858888604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018460001916600019168152602001836000191660001916815260200182600019166000191681526020019550505050505060405180910390a15050505050565b600080612ac183612aba60405180807f434f52504f524154494f4e5f4d454d424552535f524f4c45000000000000000081525060180190506040518091039020613780565b60006142ec565b1515612acc57600080fd5b612ad583611ea8565b96505050505092505080151515612b54576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f70726f706f73616c20697320657870697265640000000000000000000000000081525060200191505060405180910390fd5b612b5d8361453b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f2ff15d60405180807f434f52504f524154494f4e5f4d454d424552535f524f4c45000000000000000081525060180190506040518091039020846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015612c5f57600080fd5b505af1158015612c73573d6000803e3d6000fd5b50505050505050565b6000806000612cca84612cc360405180807f434f52504f524154494f4e5f4d454d424552535f524f4c45000000000000000081525060180190506040518091039020613780565b60006142ec565b1515612cd557600080fd5b612cde84611ea8565b97505050505093505081151515612d5d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f70726f706f73616c20697320657870697265640000000000000000000000000081525060200191505060405180910390fd5b612d668461453b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166326aa9924846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015612e2357600080fd5b505af1158015612e37573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1660405180807f696e697450726f6a656374282900000000000000000000000000000000000000815250600d01905060405180910390207c010000000000000000000000000000000000000000000000000000000090046040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303816000875af1925050509050801515612f5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f63616c6c20746f2070726f6a65637441646472657373206661696c656400000081525060200191505060405180910390fd5b7f419d1b16eae12e7b3449e148bcecd3786e98196666443886a97530","9bff24d79984846040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150505050565b60405180807f554e495445445f50524f4a4543545f4d414e414745525f524f4c450000000000815250601b019050604051809103902081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663158ef93e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561309957600080fd5b505af11580156130ad573d6000803e3d6000fd5b505050506040513d60208110156130c357600080fd5b81019080805190602001909291905050509050600015158115151480156130ee57506130ed611f67565b5b1515613162576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f696e697469616c697a656420616c72656164790000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638129fc1c6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156131e857600080fd5b505af11580156131fc573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e4e009160405180807f434f52504f524154494f4e5f4d454d424552535f524f4c4500000000000000008152506018019050604051809103902060405180807f434f52504f524154494f4e5f4d454d424552535f524f4c450000000000000000815250601801905060405180910390206040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826000191660001916815260200192505050600060405180830381600087803b15801561331357600080fd5b505af1158015613327573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d95847160405180807f434f52504f524154494f4e5f4d454d424552535f524f4c45000000000000000081525060180190506040518091039020846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561342d57600080fd5b505af1158015613441573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d95847160405180807f434f52504f524154494f4e5f4d454d424552535f524f4c45000000000000000081525060180190506040518091039020306040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561354757600080fd5b505af115801561355b573d6000803e3d6000fd5b505050507fb36fa3531ddbb3ce69404969baaa64bd0882c719656e8aaff6b2f21be4c17a0f33308460405180807f434f52504f524154494f4e5f4d454d424552535f524f4c4500000000000000008152506018019050604051809103902060405180807f434f52504f524154494f4e5f4d454d424552535f524f4c45000000000000000081525060180190506040518091039020604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001836000191660001916815260200182600019166000191681526020019550505050505060405180910390a15050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561374057600080fd5b505af1158015613754573d6000803e3d6000fd5b505050506040513d602081101561376a57600080fd5b8101908080519060200190929190505050905090565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ca15c873846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561381c57600080fd5b505af1158015613830573d6000803e3d6000fd5b505050506040513d602081101561384657600080fd5b810190808051906020019092919050505090506000811115156138d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6d656d62657220636f756e74206973207a65726f00000000000000000000000081525060200191505060405180910390fd5b60018103905080915050919050565b60405180807f696e6974436f72706f726174696f6e436f6e74726f6c6c65722861646472657381526020017f732c75696e743235362900000000000000000000000000000000000000000000815250602a019050604051809103902081565b60405180807f434f52504f524154494f4e5f43464f5f524f4c450000000000000000000000008152506014019050604051809103902081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c9f861d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613a0057600080fd5b505af1158015613a14573d6000803e3d6000fd5b505050506040513d6020811015613a2a57600080fd5b8101908080519060200190929190505050905090565b60405180807f696e697450726f6a656374282900000000000000000000000000000000000000815250600d019050604051809103902081565b60405180807f6164644d616e6167657228616464726573732c61646472657373290000000000815250601b019050604051809103902081565b6000806000339150613af960405180807f434f52504f524154494f4e5f4d454d424552535f524f4c4500000000000000008152506018019050604051809103902083611277565b8015613b405750613b3f60405180807f434f52504f524154494f4e5f4d454d424552535f524f4c4500000000000000008152506018019050604051809103902088611277565b5b1515613b4b57600080fd5b8673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515613bef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f796f752063616e206e6f742073656e6420746f20796f757273656c660000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166326ffee0883866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613cb457600080fd5b505af1158015613cc8573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5d82b6b88866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613d9157600080fd5b505af1158015613da5573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff1660405180807f7472616e736665725265636569766528616464726573732c616464726573732c81526020017f616464726573732c75696e743235362900000000000000000000000000000000815250603001905060405180910390207c01000000000000000000000000000000000000000000000000000000009004838888886040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019450505050506000604051808303816000875af1925050509050801515613f9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f63616c6c20746f207472616e73666572526563","65697665206661696c6564000081525060200191505060405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f5b21a3c624a398df3917a0a930f91e3837519b8eab3302b834746433065f29598988604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a4600192505050949350505050565b600061409960405180807f434f52504f524154494f4e5f4d454d424552535f524f4c4500000000000000008152506018019050604051809103902033611277565b15156140a457600080fd5b6140ad82614574565b9050919050565b60008060008089600019166000191681526020019081526020016000206003015414151561414a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f70726f706f73616c20657869737400000000000000000000000000000000000081525060200191505060405180910390fd5b85600080896000191660001916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600080896000191660001916815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836000808960001916600019168152602001908152602001600020600401816000191690555082600080896000191660001916815260200190815260200160002060050160006101000a81548160ff0219169083600281111561426157fe5b0217905550816000808960001916600019168152602001908152602001600020600601819055503373ffffffffffffffffffffffffffffffffffffffff167f4d8cac15492a3b75e96c454727606095bdc03fcb2b700020bbe3ff8f5f9a28928860405180826000191660001916815260200191505060405180910390a2600190509695505050505050565b600080600080866000191660001916815260200190815260200160002060030154905060008114156143215760009150614533565b6000600281111561432e57fe5b83600281111561433a57fe5b14156143d157600661435661435083600a61472a565b866147f7565b101515156143cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f496e73756666696369656e7420766f746573000000000000000000000000000081525060200191505060405180910390fd5b61452e565b600160028111156143de57fe5b8360028111156143ea57fe5b141561448157600561440661440083600a61472a565b866147f7565b1015151561447c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f496e73756666696369656e7420766f746573000000000000000000000000000081525060200191505060405180910390fd5b61452d565b60028081111561448d57fe5b83600281111561449957fe5b141561452c5760036144b56144af83600a61472a565b866147f7565b1015151561452b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f496e73756666696369656e7420766f746573000000000000000000000000000081525060200191505060405180910390fd5b5b5b5b600191505b509392505050565b6001600080836000191660001916815260200190815260200160002060070160006101000a81548160ff02191690831515021790555050565b60008060008084600019166000191681526020019081526020016000209050600015158160020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561465d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f796f75206861766520616c726561647920766f7465640000000000000000000081525060200191505060405180910390fd5b60018160020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600181600301600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167fc1eff9d9e2ab8a2b29706e0c2818cd78972e60f1ce84c268a77005b0bece97c48460405180826000191660001916815260200191505060405180910390a26001915050919050565b600080600084141561473f57600091506147f0565b828402905082848281151561475057fe5b041415156147ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f81526020017f770000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8091505b5092915050565b600061483983836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614841565b905092915050565b60008060008411839015156148f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156148b657808201518184015260208101905061489b565b50505050905090810190601f1680156148e35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5083858115156148fd57fe5b0490508091505093925050505600a165627a7a72305820c3647be63bb0cdc07cd26737394a89f4bd5924c150746eeac014368ba60172b70029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"name\":\"proposer\",\"type\":\"address\"},{\"name\":\"proposerContract\",\"type\":\"address\"},{\"name\":\"message\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"startProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"revokeRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRANSFERRECEIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORPORATION_BRANCH_MANAGER_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORPORATION_CEO_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"activeCorporation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_MANAGER_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_STAFF_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"projectContractAddress\",\"type\":\"address\"},{\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"addUnitedProjectManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORPORATION_MEMBERS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"getProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkUCOBNodeStorageSafety\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"changeUCOBNodeStorageOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORPORATION_STAFF_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roleId\",\"type\":\"bytes32\"},{\"name\":\"adminRoleId\",\"type\":\"bytes32\"},{\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"grantRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"addUnitedProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNITED_PROJECT_MANAGER_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"corporationContractAddress\",\"type\":\"address\"}],\"name\":\"initRoleAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITCORPORATIONCONTROLLER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORPORATION_CFO_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBurn\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITPROJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADDMANAGER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"voteProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"UCOBNodeStorageAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeUCOBNodeStorageOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initializer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ucobNodeController\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"initialCorporation\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"adminRoleId\",\"type\":\"bytes32\"}],\"name\":\"InitRoleAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"firstAdminAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"roleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"adminRoleId\",\"type\":\"bytes32\"}],\"name\":\"SetRoleAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"projectContractAddress\",\"type\":\"address\"}],\"name\":\"AddUnitedProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"projectContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"AddUnitedProjectManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"corporationContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ActiveCorporation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"corporationContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"original\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":","\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"InitProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"Vote\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_STARTPROPOSAL = "startProposal";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_ISSUE = "issue";

    public static final String FUNC_CHECKROLE = "checkRole";

    public static final String FUNC_TRANSFERRECEIVE = "TRANSFERRECEIVE";

    public static final String FUNC_CORPORATION_BRANCH_MANAGER_ROLE = "CORPORATION_BRANCH_MANAGER_ROLE";

    public static final String FUNC_CORPORATION_CEO_ROLE = "CORPORATION_CEO_ROLE";

    public static final String FUNC_ACTIVECORPORATION = "activeCorporation";

    public static final String FUNC_PROJECT_MANAGER_ROLE = "PROJECT_MANAGER_ROLE";

    public static final String FUNC_PROJECT_STAFF_ROLE = "PROJECT_STAFF_ROLE";

    public static final String FUNC_ADDUNITEDPROJECTMANAGER = "addUnitedProjectManager";

    public static final String FUNC_CORPORATION_MEMBERS_ROLE = "CORPORATION_MEMBERS_ROLE";

    public static final String FUNC_GETPROPOSAL = "getProposal";

    public static final String FUNC_CHECKUCOBNODESTORAGESAFETY = "checkUCOBNodeStorageSafety";

    public static final String FUNC_CHANGEUCOBNODESTORAGEOWNER = "changeUCOBNodeStorageOwner";

    public static final String FUNC_CORPORATION_STAFF_ROLE = "CORPORATION_STAFF_ROLE";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_SETROLEADMIN = "setRoleAdmin";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_ADDUNITEDPROJECT = "addUnitedProject";

    public static final String FUNC_UNITED_PROJECT_MANAGER_ROLE = "UNITED_PROJECT_MANAGER_ROLE";

    public static final String FUNC_INITROLEADMIN = "initRoleAdmin";

    public static final String FUNC_GETTOTALSUPPLY = "getTotalSupply";

    public static final String FUNC_GETROLEMEMBERCOUNT = "getRoleMemberCount";

    public static final String FUNC_INITCORPORATIONCONTROLLER = "INITCORPORATIONCONTROLLER";

    public static final String FUNC_CORPORATION_CFO_ROLE = "CORPORATION_CFO_ROLE";

    public static final String FUNC_GETTOTALBURN = "getTotalBurn";

    public static final String FUNC_INITPROJECT = "INITPROJECT";

    public static final String FUNC_ADDMANAGER = "ADDMANAGER";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_VOTEPROPOSAL = "voteProposal";

    public static final Event CHANGEUCOBNODESTORAGEOWNER_EVENT = new Event("ChangeUCOBNodeStorageOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event INITROLEADMIN_EVENT = new Event("InitRoleAdmin", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event SETROLEADMIN_EVENT = new Event("SetRoleAdmin", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event ADDUNITEDPROJECT_EVENT = new Event("AddUnitedProject", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ADDUNITEDPROJECTMANAGER_EVENT = new Event("AddUnitedProjectManager", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event ACTIVECORPORATION_EVENT = new Event("ActiveCorporation", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ISSUE_EVENT = new Event("Issue", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INITPROPOSAL_EVENT = new Event("InitProposal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event VOTE_EVENT = new Event("Vote", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes32>() {}));
    ;

    @Deprecated
    protected UCOBNodeController(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected UCOBNodeController(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected UCOBNodeController(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected UCOBNodeController(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> startProposal(byte[] proposalId, String proposer, String proposerContract, byte[] message, BigInteger value) {
        final Function function = new Function(
                FUNC_STARTPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(proposer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(proposerContract), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(message), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void startProposal(byte[] proposalId, String proposer, String proposerContract, byte[] message, BigInteger value, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_STARTPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(proposer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(proposerContract), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(message), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String startProposalSeq(byte[] proposalId, String proposer, String proposerContract, byte[] message, BigInteger value) {
        final Function function = new Function(
                FUNC_STARTPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(proposer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(proposerContract), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(message), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple5<byte[], String, String, byte[], BigInteger> getStartProposalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_STARTPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple5<byte[], String, String, byte[], BigInteger>(

                (byte[]) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public Tuple1<Boolean> getStartProposalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_STARTPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> revokeRole(byte[] proposalId) {
        final Function function = new Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void revokeRole(byte[] proposalId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String revokeRoleSeq(byte[] proposalId) {
        final Function function = new Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<byte[]> getRevokeRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REVOKEROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> issue(byte[] proposalId) {
        final Function function = new Function(
                FUNC_ISSUE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void issue(byte[] proposalId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ISSUE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String issueSeq(byte[] proposalId) {
        final Function function = new Function(
                FUNC_ISSUE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<byte[]> getIssueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ISSUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public RemoteCall<Boolean> checkRole(byte[] role, String addr) {
        final Function function = new Function(FUNC_CHECKROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<byte[]> TRANSFERRECEIVE() {
        final Function function = new Function(FUNC_TRANSFERRECEIVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<byte[]> CORPORATION_BRANCH_MANAGER_ROLE() {
        final Function function = new Function(FUNC_CORPORATION_BRANCH_MANAGER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<byte[]> CORPORATION_CEO_ROLE() {
        final Function function = new Function(FUNC_CORPORATION_CEO_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> activeCorporation(byte[] proposalId) {
        final Function function = new Function(
                FUNC_ACTIVECORPORATION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void activeCorporation(byte[] proposalId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ACTIVECORPORATION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String activeCorporationSeq(byte[] proposalId) {
        final Function function = new Function(
                FUNC_ACTIVECORPORATION, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<byte[]> getActiveCorporationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ACTIVECORPORATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public RemoteCall<byte[]> PROJECT_MANAGER_ROLE() {
        final Function function = new Function(FUNC_PROJECT_MANAGER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<byte[]> PROJECT_STAFF_ROLE() {
        final Function function = new Function(FUNC_PROJECT_STAFF_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> addUnitedProjectManager(String projectContractAddress, String managerAddress) {
        final Function function = new Function(
                FUNC_ADDUNITEDPROJECTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(projectContractAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(managerAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addUnitedProjectManager(String projectContractAddress, String managerAddress, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDUNITEDPROJECTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(projectContractAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(managerAddress)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addUnitedProjectManagerSeq(String projectContractAddress, String managerAddress) {
        final Function function = new Function(
                FUNC_ADDUNITEDPROJECTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(projectContractAddress), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(managerAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, String> getAddUnitedProjectManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDUNITEDPROJECTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public RemoteCall<byte[]> CORPORATION_MEMBERS_ROLE() {
        final Function function = new Function(FUNC_CORPORATION_MEMBERS_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<Tuple7<String, String, BigInteger, byte[], BigInteger, BigInteger, Boolean>> getProposal(byte[] proposalId) {
        final Function function = new Function(FUNC_GETPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple7<String, String, BigInteger, byte[], BigInteger, BigInteger, Boolean>>(
                new Callable<Tuple7<String, String, BigInteger, byte[], BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, byte[], BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, byte[], BigInteger, BigInteger, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (byte[]) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<Boolean> checkUCOBNodeStorageSafety() {
        final Function function = new Function(FUNC_CHECKUCOBNODESTORAGESAFETY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> changeUCOBNodeStorageOwner(byte[] proposalId) {
        final Function function = new Function(
                FUNC_CHANGEUCOBNODESTORAGEOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void changeUCOBNodeStorageOwner(byte[] proposalId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEUCOBNODESTORAGEOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String changeUCOBNodeStorageOwnerSeq(byte[] proposalId) {
        final Function function = new Function(
                FUNC_CHANGEUCOBNODESTORAGEOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<byte[]> getChangeUCOBNodeStorageOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGEUCOBNODESTORAGEOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public RemoteCall<byte[]> CORPORATION_STAFF_ROLE() {
        final Function function = new Function(FUNC_CORPORATION_STAFF_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<BigInteger> balanceOf(String addr) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setRoleAdmin(byte[] roleId, byte[] adminRoleId, byte[] proposalId) {
        final Function function = new Function(
                FUNC_SETROLEADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(roleId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(adminRoleId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setRoleAdmin(byte[] roleId, byte[] adminRoleId, byte[] proposalId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETROLEADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(roleId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(adminRoleId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setRoleAdminSeq(byte[] roleId, byte[] adminRoleId, byte[] proposalId) {
        final Function function = new Function(
                FUNC_SETROLEADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(roleId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(adminRoleId), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<byte[], byte[], byte[]> getSetRoleAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETROLEADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<byte[], byte[], byte[]>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> grantRole(byte[] proposalId) {
        final Function function = new Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void grantRole(byte[] proposalId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String grantRoleSeq(byte[] proposalId) {
        final Function function = new Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<byte[]> getGrantRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GRANTROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> addUnitedProject(byte[] proposalId) {
        final Function function = new Function(
                FUNC_ADDUNITEDPROJECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addUnitedProject(byte[] proposalId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDUNITEDPROJECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addUnitedProjectSeq(byte[] proposalId) {
        final Function function = new Function(
                FUNC_ADDUNITEDPROJECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<byte[]> getAddUnitedProjectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDUNITEDPROJECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public RemoteCall<byte[]> UNITED_PROJECT_MANAGER_ROLE() {
        final Function function = new Function(FUNC_UNITED_PROJECT_MANAGER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> initRoleAdmin(String corporationContractAddress) {
        final Function function = new Function(
                FUNC_INITROLEADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(corporationContractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void initRoleAdmin(String corporationContractAddress, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_INITROLEADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(corporationContractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String initRoleAdminSeq(String corporationContractAddress) {
        final Function function = new Function(
                FUNC_INITROLEADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(corporationContractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getInitRoleAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITROLEADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<BigInteger> getTotalSupply() {
        final Function function = new Function(FUNC_GETTOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getRoleMemberCount(byte[] role) {
        final Function function = new Function(FUNC_GETROLEMEMBERCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<byte[]> INITCORPORATIONCONTROLLER() {
        final Function function = new Function(FUNC_INITCORPORATIONCONTROLLER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<byte[]> CORPORATION_CFO_ROLE() {
        final Function function = new Function(FUNC_CORPORATION_CFO_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<BigInteger> getTotalBurn() {
        final Function function = new Function(FUNC_GETTOTALBURN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<byte[]> INITPROJECT() {
        final Function function = new Function(FUNC_INITPROJECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<byte[]> ADDMANAGER() {
        final Function function = new Function(FUNC_ADDMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> transfer(String destination, String _from, String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(destination), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transfer(String destination, String _from, String to, BigInteger value, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(destination), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transferSeq(String destination, String _from, String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(destination), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(_from), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, String, BigInteger> getTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<Boolean> getTransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> voteProposal(byte[] proposalId) {
        final Function function = new Function(
                FUNC_VOTEPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void voteProposal(byte[] proposalId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_VOTEPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String voteProposalSeq(byte[] proposalId) {
        final Function function = new Function(
                FUNC_VOTEPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(proposalId)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<byte[]> getVoteProposalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VOTEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getVoteProposalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VOTEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public List<ChangeUCOBNodeStorageOwnerEventResponse> getChangeUCOBNodeStorageOwnerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHANGEUCOBNODESTORAGEOWNER_EVENT, transactionReceipt);
        ArrayList<ChangeUCOBNodeStorageOwnerEventResponse> responses = new ArrayList<ChangeUCOBNodeStorageOwnerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChangeUCOBNodeStorageOwnerEventResponse typedResponse = new ChangeUCOBNodeStorageOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.old = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._new = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerChangeUCOBNodeStorageOwnerEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CHANGEUCOBNODESTORAGEOWNER_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerChangeUCOBNodeStorageOwnerEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CHANGEUCOBNODESTORAGEOWNER_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<InitRoleAdminEventResponse> getInitRoleAdminEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INITROLEADMIN_EVENT, transactionReceipt);
        ArrayList<InitRoleAdminEventResponse> responses = new ArrayList<InitRoleAdminEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitRoleAdminEventResponse typedResponse = new InitRoleAdminEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.initializer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.ucobNodeController = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.initialCorporation = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.roleId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.adminRoleId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerInitRoleAdminEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(INITROLEADMIN_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerInitRoleAdminEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(INITROLEADMIN_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<SetRoleAdminEventResponse> getSetRoleAdminEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETROLEADMIN_EVENT, transactionReceipt);
        ArrayList<SetRoleAdminEventResponse> responses = new ArrayList<SetRoleAdminEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetRoleAdminEventResponse typedResponse = new SetRoleAdminEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.msg_sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.firstAdminAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.roleId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.adminRoleId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSetRoleAdminEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SETROLEADMIN_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerSetRoleAdminEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SETROLEADMIN_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<AddUnitedProjectEventResponse> getAddUnitedProjectEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDUNITEDPROJECT_EVENT, transactionReceipt);
        ArrayList<AddUnitedProjectEventResponse> responses = new ArrayList<AddUnitedProjectEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddUnitedProjectEventResponse typedResponse = new AddUnitedProjectEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.projectContractAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerAddUnitedProjectEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ADDUNITEDPROJECT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerAddUnitedProjectEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ADDUNITEDPROJECT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<AddUnitedProjectManagerEventResponse> getAddUnitedProjectManagerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDUNITEDPROJECTMANAGER_EVENT, transactionReceipt);
        ArrayList<AddUnitedProjectManagerEventResponse> responses = new ArrayList<AddUnitedProjectManagerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddUnitedProjectManagerEventResponse typedResponse = new AddUnitedProjectManagerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.projectContractAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.managerAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerAddUnitedProjectManagerEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ADDUNITEDPROJECTMANAGER_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerAddUnitedProjectManagerEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ADDUNITEDPROJECTMANAGER_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<ActiveCorporationEventResponse> getActiveCorporationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACTIVECORPORATION_EVENT, transactionReceipt);
        ArrayList<ActiveCorporationEventResponse> responses = new ArrayList<ActiveCorporationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ActiveCorporationEventResponse typedResponse = new ActiveCorporationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.corporationContractAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.beneficiary = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerActiveCorporationEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ACTIVECORPORATION_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerActiveCorporationEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ACTIVECORPORATION_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<IssueEventResponse> getIssueEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ISSUE_EVENT, transactionReceipt);
        ArrayList<IssueEventResponse> responses = new ArrayList<IssueEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IssueEventResponse typedResponse = new IssueEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.corporationContractAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.beneficiary = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerIssueEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ISSUE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerIssueEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ISSUE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.original = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.destination = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse._from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerTransferEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSFER_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerTransferEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSFER_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<InitProposalEventResponse> getInitProposalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INITPROPOSAL_EVENT, transactionReceipt);
        ArrayList<InitProposalEventResponse> responses = new ArrayList<InitProposalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitProposalEventResponse typedResponse = new InitProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proposer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerInitProposalEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(INITPROPOSAL_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerInitProposalEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(INITPROPOSAL_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<VoteEventResponse> getVoteEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTE_EVENT, transactionReceipt);
        ArrayList<VoteEventResponse> responses = new ArrayList<VoteEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteEventResponse typedResponse = new VoteEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerVoteEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(VOTE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerVoteEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(VOTE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static UCOBNodeController load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new UCOBNodeController(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static UCOBNodeController load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new UCOBNodeController(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static UCOBNodeController load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new UCOBNodeController(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static UCOBNodeController load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new UCOBNodeController(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<UCOBNodeController> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String UCOBNodeStorageAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(UCOBNodeStorageAddress)));
        return deployRemoteCall(UCOBNodeController.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<UCOBNodeController> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String UCOBNodeStorageAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(UCOBNodeStorageAddress)));
        return deployRemoteCall(UCOBNodeController.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<UCOBNodeController> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String UCOBNodeStorageAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(UCOBNodeStorageAddress)));
        return deployRemoteCall(UCOBNodeController.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<UCOBNodeController> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String UCOBNodeStorageAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(UCOBNodeStorageAddress)));
        return deployRemoteCall(UCOBNodeController.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ChangeUCOBNodeStorageOwnerEventResponse {
        public Log log;

        public byte[] proposalId;

        public String old;

        public String _new;
    }

    public static class InitRoleAdminEventResponse {
        public Log log;

        public String initializer;

        public String ucobNodeController;

        public String initialCorporation;

        public byte[] roleId;

        public byte[] adminRoleId;
    }

    public static class SetRoleAdminEventResponse {
        public Log log;

        public String msg_sender;

        public String firstAdminAddress;

        public byte[] proposalId;

        public byte[] roleId;

        public byte[] adminRoleId;
    }

    public static class AddUnitedProjectEventResponse {
        public Log log;

        public byte[] proposalId;

        public String projectContractAddress;
    }

    public static class AddUnitedProjectManagerEventResponse {
        public Log log;

        public String projectContractAddress;

        public String managerAddress;
    }

    public static class ActiveCorporationEventResponse {
        public Log log;

        public String corporationContractAddress;

        public byte[] proposalId;

        public String beneficiary;

        public BigInteger value;
    }

    public static class IssueEventResponse {
        public Log log;

        public String corporationContractAddress;

        public byte[] proposalId;

        public String beneficiary;

        public BigInteger value;
    }

    public static class TransferEventResponse {
        public Log log;

        public String original;

        public String destination;

        public String to;

        public String _from;

        public BigInteger value;
    }

    public static class InitProposalEventResponse {
        public Log log;

        public String proposer;

        public byte[] proposalId;
    }

    public static class VoteEventResponse {
        public Log log;

        public String voter;

        public byte[] proposalId;
    }
}
